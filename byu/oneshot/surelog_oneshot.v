/* Generated by Yosys 0.16+65 (git sha1 UNKNOWN, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os) */

(* top =  1  *)
module oneshot(clk, rst, in, os);
  (* unused_bits = "0" *)
  wire _0_;
  wire _1_;
  input clk;
  wire clk;
  input in;
  wire in;
  (* packed_ranges = 1'h1 *)
  (* unpacked_ranges = 1'h1 *)
  wire [2:0] next_state;
  output os;
  wire os;
  input rst;
  wire rst;
  (* packed_ranges = 1'h1 *)
  (* unpacked_ranges = 1'h1 *)
  wire [2:0] state;
  reg [1:0] _2_;
  always @(posedge clk)
    if (rst) _2_ <= 2'h0;
    else if (_1_) _2_ <= next_state[1:0];
  assign state[1:0] = _2_;
  assign _1_ = { next_state[0], in } != 2'h2;
  function [1:0] _4_;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _4_ = b[1:0];
      2'b1?:
        _4_ = b[3:2];
      default:
        _4_ = a;
    endcase
  endfunction
  assign { next_state[1], _0_ } = _4_(2'h0, { 2'h1, in, 1'h0 }, { next_state[0], os });
  assign os = { state[1], state[1:0] } == (* full_case = 32'd1 *) 1'h1;
  assign next_state[0] = ! (* full_case = 32'd1 *) { state[1], state[1:0] };
  assign next_state[2] = next_state[1];
  assign state[2] = state[1];
endmodule
