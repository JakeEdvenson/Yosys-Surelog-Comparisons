/* Generated by Yosys 0.16+65 (git sha1 UNKNOWN, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os) */

(* top =  1  *)
module UpDownButtonCount(clk, btnc, btnu, btnd, btnr, btnl, led, sw);
  wire [15:0] _00_;
  wire [15:0] _01_;
  (* unused_bits = "0" *)
  wire _02_;
  (* unused_bits = "0" *)
  wire _03_;
  (* unused_bits = "0" *)
  wire _04_;
  (* unused_bits = "0" *)
  wire _05_;
  wire _06_;
  wire _07_;
  (* unused_bits = "16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _08_;
  wire [15:0] _09_;
  wire [15:0] _10_;
  wire [15:0] _11_;
  wire [15:0] _12_;
  input btnc;
  wire btnc;
  input btnd;
  wire btnd;
  reg btnd_d;
  input btnl;
  wire btnl;
  reg btnl_d;
  input btnr;
  wire btnr;
  reg btnr_d;
  input btnu;
  wire btnu;
  reg btnu_d;
  input clk;
  wire clk;
  (* packed_ranges = 1'h1 *)
  (* unpacked_ranges = 1'h1 *)
  reg [15:0] count_i;
  reg dec;
  wire dec_count;
  wire dec_count_sw;
  reg dec_sw;
  reg inc;
  wire inc_count;
  wire inc_count_sw;
  reg inc_sw;
  (* packed_ranges = 1'h1 *)
  (* unpacked_ranges = 1'h1 *)
  output [15:0] led;
  wire [15:0] led;
  wire rst;
  (* packed_ranges = 1'h1 *)
  (* unpacked_ranges = 1'h1 *)
  input [15:0] sw;
  wire [15:0] sw;
  assign _00_ = count_i + 1'h1;
  assign _01_ = count_i + sw;
  always @(posedge clk)
    if (btnc) count_i <= 16'h0000;
    else if (_07_) count_i <= _11_;
  always @(posedge clk)
    if (btnc) btnu_d <= 1'h0;
    else btnu_d <= btnu;
  always @(posedge clk)
    if (btnc) inc <= 1'h0;
    else inc <= btnu_d;
  always @(posedge clk)
    if (btnc) btnd_d <= 1'h0;
    else btnd_d <= btnd;
  always @(posedge clk)
    if (btnc) dec <= 1'h0;
    else dec <= btnd_d;
  always @(posedge clk)
    if (btnc) btnr_d <= 1'h0;
    else btnr_d <= btnr;
  always @(posedge clk)
    if (btnc) inc_sw <= 1'h0;
    else inc_sw <= btnr_d;
  always @(posedge clk)
    if (btnc) btnl_d <= 1'h0;
    else btnl_d <= btnl;
  always @(posedge clk)
    if (btnc) dec_sw <= 1'h0;
    else dec_sw <= btnl_d;
  assign _06_ = ~_00_[1];
  assign _07_ = | { dec_sw, inc_sw, dec, inc };
  assign { _09_[15:1], _03_ } = inc_sw ? (* full_case = 32'd1 *) _01_ : { _12_[15:1], _01_[0] };
  assign _10_ = dec ? (* full_case = 32'd1 *) { _08_[15:2], _06_, _00_[0] } : { _09_[15:1], _01_[0] };
  assign _11_ = inc ? (* full_case = 32'd1 *) _00_ : _10_;
  assign { _08_[15:2], _05_, _04_ } = count_i - 1'h1;
  assign { _12_[15:1], _02_ } = count_i - sw;
  assign _08_[1:0] = { _06_, _00_[0] };
  assign _09_[0] = _01_[0];
  assign _12_[0] = _01_[0];
  assign dec_count = dec;
  assign dec_count_sw = dec_sw;
  assign inc_count = inc;
  assign inc_count_sw = inc_sw;
  assign led = count_i;
  assign rst = btnc;
endmodule
