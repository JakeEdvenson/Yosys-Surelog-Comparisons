/* Generated by Yosys 0.16+65 (git sha1 UNKNOWN, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os) */

(* top =  1  *)
module buttoncount(clk, btnc, btnu, led);
  wire [15:0] _00_;
  (* unused_bits = "0" *)
  wire _01_;
  (* unused_bits = "0" *)
  wire _02_;
  wire [2:0] _03_;
  wire _04_;
  input btnc;
  wire btnc;
  input btnu;
  wire btnu;
  reg btnu_d;
  input clk;
  wire clk;
  (* packed_ranges = 1'h1 *)
  (* unpacked_ranges = 1'h1 *)
  reg [15:0] count_i;
  reg inc;
  wire inc_count;
  (* packed_ranges = 1'h1 *)
  (* unpacked_ranges = 1'h1 *)
  output [15:0] led;
  wire [15:0] led;
  (* hdlname = "os clk" *)
  wire \os.clk ;
  (* hdlname = "os in" *)
  wire \os.in ;
  (* hdlname = "os next_state" *)
  (* packed_ranges = 1'h1 *)
  (* unpacked_ranges = 1'h1 *)
  wire [2:0] \os.next_state ;
  (* hdlname = "os os" *)
  wire \os.os ;
  (* hdlname = "os rst" *)
  wire \os.rst ;
  (* hdlname = "os state" *)
  (* packed_ranges = 1'h1 *)
  (* unpacked_ranges = 1'h1 *)
  wire [2:0] \os.state ;
  wire rst;
  assign _00_ = count_i + 1'h1;
  always @(posedge clk)
    if (btnc) count_i <= 16'h0000;
    else if (\os.os ) count_i <= _00_;
  always @(posedge clk)
    if (btnc) btnu_d <= 1'h0;
    else btnu_d <= btnu;
  always @(posedge clk)
    if (btnc) inc <= 1'h0;
    else inc <= btnu_d;
  reg [1:0] _09_;
  always @(posedge clk)
    if (btnc) _09_ <= 2'h0;
    else if (_04_) _09_ <= \os.next_state [1:0];
  assign \os.state [1:0] = _09_;
  assign _04_ = { \os.next_state [0], inc } != 2'h2;
  assign { _03_[2], _01_ } = inc ? (* full_case = 32'd1 *) 2'h2 : 2'h0;
  function [1:0] _12_;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _12_ = b[1:0];
      2'b1?:
        _12_ = b[3:2];
      default:
        _12_ = a;
    endcase
  endfunction
  assign { \os.next_state [1], _02_ } = _12_(2'h0, { 2'h1, _03_[2], 1'h0 }, { \os.next_state [0], \os.os  });
  assign \os.os  = { \os.state [1], \os.state [1:0] } == (* full_case = 32'd1 *) 1'h1;
  assign \os.next_state [0] = ! (* full_case = 32'd1 *) { \os.state [1], \os.state [1:0] };
  assign \os.state [2] = \os.state [1];
  assign \os.rst  = btnc;
  assign \os.next_state [2] = \os.next_state [1];
  assign \os.in  = inc;
  assign \os.clk  = clk;
  assign _03_[1:0] = { _03_[2], 1'h0 };
  assign inc_count = \os.os ;
  assign led = count_i;
  assign rst = btnc;
endmodule
